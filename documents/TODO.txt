COSE DA SISTEMARE:

1. funzione CipherToCode - riempire i casi che riguardano DHE_DSS e DHE_RSA. Nota: nel codice DSS è rappresentato da DSA.

DSA_s per la precisione

tutte le informazioni su come riempire i case sono nella tabella a pagina 54 della rfc

2. Lavorare alla funzione di Signature_ : io l'ho solo iniziata. Informazioni utili sono al link: https://www.openssl.org/docs/manmaster/crypto/EVP_PKEY_sign.html

Note: la struttura EVP è un involucro per le chiavi o cifrari. Permette di decidere a runtime quale algoritmo e chiave utilizzare (per esempio RSA). Guarda come ho fatto la funzione AsymmetricEncryption

Il procedimento è simile: invece di usare EVP_encrypt(chiave pubblica) utilizzi EVP_sign(chiave privata). Le chiavi private stanno nell'apposita cartella.

- stampare anche i record layer.

in generale: rivedere i TODO se sono superflui o sbagliati

Nel Client:

- estrarre la cipher_suite choosen dal server hello  (spero funzioni vedi circa riga 126,127 del client.c)


- TODO nel codice.

Nel Server:
- TODO nel codice.

Nell SSLfunctions:
- TODO: ALLOCO IL MAX
- completare: CipherSuite *CodeToCipherSuite(uint8_t ciphersuite_code)



Structure:

-encryptPreMaster //cambiare il nome
- mancano delle free?
- partizionare il file delle function?
- il padding pare lo faccia in automatico.
- getAlgorithm si può rimuovere
- It is a fatal error if a finished message is not preceeded by a
   change cipher spec message at the appropriate point in the handshake.
-controllare il makefile

- CERTIFICATE VERIFY 
- Verifica delle FREE 
- estrare la len_parameters dal certificato
- aggiungere altre ciphersuite .

- Sistemare i commenti (DA ASSEGNARE)izzat
